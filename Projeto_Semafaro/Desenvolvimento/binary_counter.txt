library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity binary_counter_nbits is
	generic (N: positive := 8);
	port(
		-- control inputs
		clk, reset: in std_logic;
		enable, inc: in std_logic;
		-- data inputs
		--d: in std_logic_vector(N-1 downto 0);
		-- control outputs
		-- data outputs
		q: out std_logic_vector(N-1 downto 0)
	);
end entity;

architecture canonic of binary_counter_nbits is
	subtype InternalState is unsigned(N-1 downto 0); -- ...
	signal next_state, curr_state: internal_state;
begin
	-- next state logic (combinatorial)
	next_state <= 	curr_state when enable='0' else
						curr_state + 1  when inc='1' else
						curr_state - 1;
	
	-- memory element (sequential)
	ME: process (clk, reset) is
	begin
		if reset = '1' then 
			curr_state <= (others => '0');
		elsif rising_edge(clk) then
			curr_state <= next_state;
		end if;
	end process;
	
	-- output logic (combinatorial)
	q <= std_logic_vector(curr_state);
	-- <output> <= ... curr_state ...
	
end architecture;













